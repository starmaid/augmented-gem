//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Adventurer"",
            ""id"": ""8028e015-8e23-4022-9970-097ecd583ae9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9c8c5ee9-b4a8-48f7-9b21-1ca7873b20ad"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Transmute"",
                    ""type"": ""Button"",
                    ""id"": ""285673c1-1c94-4c27-af6a-5b7732940913"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""770e4efd-75bf-4b1d-a21b-95ba61c2dcd8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""81114333-fb79-4cd2-affe-ed7dbc141ca7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe672be0-5977-46c0-9c9e-ff68c8ff761a"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Transmute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""a3d260a7-b036-4c3e-bbdd-595d08ae14fc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0326cfaf-de6b-4213-b72c-30b0e908a8c5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5dbd6819-4f40-4648-8fbe-95b01b931571"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b22a3a6e-57a0-4856-a496-a790b500ae75"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cbef7b77-0abf-4b19-86e6-621c2fc8c559"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""42275c40-12f2-4fb8-9ff1-2b489ee6bf8d"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf032acd-0f05-45e5-a245-4b17e0c2118c"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Adventurer
        m_Adventurer = asset.FindActionMap("Adventurer", throwIfNotFound: true);
        m_Adventurer_Move = m_Adventurer.FindAction("Move", throwIfNotFound: true);
        m_Adventurer_Transmute = m_Adventurer.FindAction("Transmute", throwIfNotFound: true);
        m_Adventurer_Interact = m_Adventurer.FindAction("Interact", throwIfNotFound: true);
        m_Adventurer_Push = m_Adventurer.FindAction("Push", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Adventurer
    private readonly InputActionMap m_Adventurer;
    private List<IAdventurerActions> m_AdventurerActionsCallbackInterfaces = new List<IAdventurerActions>();
    private readonly InputAction m_Adventurer_Move;
    private readonly InputAction m_Adventurer_Transmute;
    private readonly InputAction m_Adventurer_Interact;
    private readonly InputAction m_Adventurer_Push;
    public struct AdventurerActions
    {
        private @PlayerControls m_Wrapper;
        public AdventurerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Adventurer_Move;
        public InputAction @Transmute => m_Wrapper.m_Adventurer_Transmute;
        public InputAction @Interact => m_Wrapper.m_Adventurer_Interact;
        public InputAction @Push => m_Wrapper.m_Adventurer_Push;
        public InputActionMap Get() { return m_Wrapper.m_Adventurer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AdventurerActions set) { return set.Get(); }
        public void AddCallbacks(IAdventurerActions instance)
        {
            if (instance == null || m_Wrapper.m_AdventurerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AdventurerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Transmute.started += instance.OnTransmute;
            @Transmute.performed += instance.OnTransmute;
            @Transmute.canceled += instance.OnTransmute;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Push.started += instance.OnPush;
            @Push.performed += instance.OnPush;
            @Push.canceled += instance.OnPush;
        }

        private void UnregisterCallbacks(IAdventurerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Transmute.started -= instance.OnTransmute;
            @Transmute.performed -= instance.OnTransmute;
            @Transmute.canceled -= instance.OnTransmute;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Push.started -= instance.OnPush;
            @Push.performed -= instance.OnPush;
            @Push.canceled -= instance.OnPush;
        }

        public void RemoveCallbacks(IAdventurerActions instance)
        {
            if (m_Wrapper.m_AdventurerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAdventurerActions instance)
        {
            foreach (var item in m_Wrapper.m_AdventurerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AdventurerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AdventurerActions @Adventurer => new AdventurerActions(this);
    public interface IAdventurerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTransmute(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPush(InputAction.CallbackContext context);
    }
}
